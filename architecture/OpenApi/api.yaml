openapi: 3.0.0

info:
  description: >-
    This is the API for a course project at ITMO University. The theme of the
    course is "The goblin slayer contract system". Server on github.
  version: "1.0.1"
  title: Goblin Slayer Server API

servers:
  - description: Server
    url: 'http://paulrozhkin.ru:3464/'

tags:
  - name: auth
    description: Endpoint for authentication.
  - name: admin
    description: Endpoint for admin.
  - name: users
    description: Endpoint for working with users.
  - name: account
    description: Endrpoint for working with current account.
  - name: contracts
    description: Endpoint for working with contracts.
  - name: adventurers
    description: Endpoint for working with adventurers.


paths:
  /api/v1/auth/:
    post:
      tags:
        - auth
      operationId: userAuthentication
      summary: Receiving Access Token and Refresh Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
        required: true
      responses:
        '200':
          description: Tokens authorizations
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/authenticationModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'


  /api/v1/admin/users/:
    #Получение списка пользователей
    get:
      tags:
        - admin
      operationId: getAllUsers
      summary: Getting a list of users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: Filtration by username
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Pagination parameter
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: Pagination parameter
      responses:
        '200':
          description: Getting a list of users
          content:
            application-json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginationInfo'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

    #Создание новой модели пользователя
    post:
      tags:
        - admin
      operationId: createUserWithRoles
      summary: Create the user's model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreatableAdminModel'
        required: true
      responses:
        '200':
          description: The user's model was created successfully.
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/admin/users/{id}:
    # Обновление модели пользователя
    put:
      tags:
        - admin
      operationId: updateUserById
      summary: Update the user's model
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'User ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdatableModel'
        required: true
      responses:
        '200':
          description: The user's model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/users/:
    #Создание новой модели пользователя
    post:
      tags:
        - users
      operationId: createUser
      summary: Create the user's model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreatableModel'
        required: true
      responses:
        '200':
          description: The user's model was created successfully.
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/users/{id}:
    #Получение модели пользователя по ID
    get:
      tags:
        - users
      operationId: getUserById
      summary: Getting the user's model by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'User ID.'
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User model
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/adventurers/:
    # Получение списка авантюристов
    get:
      tags:
        - adventurers
      operationId: getAllAdventurers
      summary: Getting a list of adventurers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: Filtration by username
        - in: query
          name: rank
          schema:
            $ref: '#/components/schemas/ranksModel'
          required: false
          description: Filtration by rank. Returned all adventurers that equal to the required rank
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/adventurerStatus'
          required: false
          description: Adventurer status
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Pagination parameter
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: Pagination parameter
      responses:
        '200':
          description: Getting a list of users
          content:
            application-json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginationInfo'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/adventurerModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

    #Создание новой модели пользователя
    post:
      tags:
        - adventurers
      operationId: createAdventurer
      summary: Create the adventurers model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adventurerCreatableModel'
        required: true
      responses:
        '200':
          description: The user's model was created successfully.
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/adventurers/{id}:
    #Получение модели авантюриста по ID
    get:
      tags:
        - adventurers
      operationId: getAdventurerById
      summary: Getting the adventurer model by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Adventurer ID.'
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Adventurer model
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/adventurerModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/adventurers/{id}/status/:
    # Обновление статуса авантюриста
    put:
      tags:
        - adventurers
      operationId: updateAdventurerStatusById
      summary: Update the adventurer status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'User ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adventurerStatusUpdatableModel'
        required: true
      responses:
        '200':
          description: The adventurer model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adventurerModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: "Forbidden. Registrar and admin can only update the status."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/adventurers/{id}/ranks/:
    # Обновление ранга авантюриста
    put:
      tags:
        - adventurers
      operationId: updateAdventurerRankById
      summary: Update the adventurer rank
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'User ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adventurerRanksUpdatableModel'
        required: true
      responses:
        '200':
          description: The adventurer model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adventurerModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: "Forbidden. Distributor and admin can only update the ranks."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/adventurers/{id}/ranks/history/:
    # Получение списка авантюристов
    get:
      tags:
        - adventurers
      operationId: getAdventurerRankHistory
      summary: Getting a list of rank history
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'User ID.'
          in: path
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Pagination parameter
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: Pagination parameter
      responses:
        '200':
          description: List of rank history
          content:
            application-json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginationInfo'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/rankHistoryModel'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/account/notifications/:
    # Получить нотификации пользователя
    get:
      tags:
        - account
      operationId: getСurrentUserNotifications
      summary: Getting the current user notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification model
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/account/notifications/contract-notifications/{id}:
    # Подтвердить прием оповещения об изменении контракта
    post:
      tags:
        - account
      operationId: confirmNotification
      summary: Сonfirm contract notification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract notification ID.'
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Confirmed.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Forbidden. You are not customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found notification by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/account/:
    #Получение модели пользователя по JWT
    get:
      tags:
        - account
      operationId: getСurrentUser
      summary: Getting the current user's model
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User model
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

    # Обновить персональную информацию
    put:
      tags:
        - account
      operationId: updateAccountInformation
      summary: Update the account information
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountUpdateInfo'
        required: true
      responses:
        '200':
          description: The account was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/account/password/:
    # Обновить пароль пользователя
    put:
      tags:
        - account
      operationId: updateAccountPassword
      summary: Update the password
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordUpdateInfo'
        required: true
      responses:
        '200':
          description: The password was updated successfully.
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/contracts/:
    #Получение списка всех контрактов
    get:
      tags:
        - contracts
      operationId: getContracts
      summary: Getting a list of contracts
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: nameContract
          schema:
            type: string
          required: false
          description: Filtration by name
        - in: query
          name: customer
          schema:
            type: integer
          required: false
          description: Filtration by customer
        - in: query
          name: executor
          schema:
            type: integer
          required: false
          description: Filtration by executor
        - in: query
          name: rank
          schema:
            $ref: '#/components/schemas/ranksModel'
          required: false
          description: Filtration by rank. Returned all contracts that are equal to the required rank
        - in: query
          name: minRank
          schema:
            $ref: '#/components/schemas/ranksModel'
          required: false
          description: Filtration by minimum rank. Returned all contracts that are less than or equal to the required minimum rank. If a rank filter is set, minRank is ignored.
        - in: query
          name: contractStatus
          schema:
            $ref: '#/components/schemas/contractStatus'
          required: false
          description: Filtration by contractStatus.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Pagination parameter
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: Pagination parameter
      responses:
        '200':
          description: Getting a list of contracts
          content:
            application-json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/paginationInfo'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/contract'

        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

    #Создание новой модели контракта
    post:
      tags:
        - contracts
      operationId: createContract
      summary: Create the contract's model
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contractCreateModel'
        required: true
      responses:
        '200':
          description: The contract's model was created successfully.
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/contracts/{id}:
    #Получение модели контракта по ID
    get:
      tags:
        - contracts
      operationId: getСontractById
      summary: Getting the contract's model by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract ID.'
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Contract model
          content:
            application-json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

      #Удаление модели пользователя по ID

    #Обновление модели контракта по ID
    put:
      tags:
        - contracts
      operationId: updateContractById
      summary: Update the contract's model
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contractUpdateModel'
        required: true
      responses:
        '200':
          description: The cotract's model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/contracts/{id}/perform/:
    # Начать исполнение контракта авантюристом
    post:
      tags:
        - contracts
      operationId: startPerformContractByAdventurer
      summary: Start performing contact
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract ID.'
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The adventurer model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: "Forbidden. Only adventurer can start perform contact."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/contracts/{id}/performed/:
    # Завершить исполнение контракта авантюристом
    post:
      tags:
        - contracts
      operationId: performedContractByAdventurer
      summary: Stop performing contract if completed
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contractPerformedModel'
        required: true
      responses:
        '200':
          description: The adventurer model was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: "Forbidden. Only adventurer can stop performing contact."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /api/v1/contracts/{id}/cancel/:
    # Отменить исполнение контракта текущим авантюристом
    post:
      tags:
        - contracts
      operationId: cancelContractByAdventurer
      summary: Cancel contact
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: 'Contract ID.'
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contractCancellationModel'
        required: true
      responses:
        '200':
          description: The contract was cancelled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contract'
        '400':
          description: Bad Reaquest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: "Forbidden. Only adventurer, registrar and admin can cancel contact."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

components:
  schemas:

    credentials:
      type: object
      properties:
        username:
          description: 'Username for auth or registration'
          type: string
          example: 'username@email.com'
        password:
          description: 'Password without encoding'
          type: string
          example: 'password'

    authenticationModel:
      type: object
      properties:
        username:
          description: 'Username of authorized user'
          type: string
          example: ''
        token:
          description: 'User jwt access token'
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0Iiwicm9sZXMiOlsiUk9MRV9DVVNUT01FUiJdLCJpYXQiOjE1OTQ4MjEwOTIsImV4cCI6MTU5NDgyNDY5Mn0.PdvjqHjclbbhmXu3vn-Qsl4-G4XA9YgsoLdbpMeiOnc'

    paginationInfo:
      type: object
      properties:
        currentPage:
          description: 'Pagination current page'
          type: integer
          example: '0'
        totalItems:
          description: 'Pagination total items'
          type: integer
          format: int64
          example: '45'
        totalPages:
          description: 'Pagination total pages'
          type: integer
          example: '15'

    user:
      allOf:
        - $ref: '#/components/schemas/userIdModel'
        - type: object
          properties:
            username:
              description: 'Username.'
              type: string
              example: 'blackIIIfox@gmail.com'
        - $ref: '#/components/schemas/userModel'

    userCommonInfoWithoutRoles:
      type: object
      properties:
        name:
          description: 'User is full name'
          type: string
          example: 'Rozkin Pavel Aleksandrovich'
        address:
          description: 'User is residential address.'
          type: string
          example: 'Russia, Moscow'

    userCommonInfo:
      allOf:
        - $ref: '#/components/schemas/userCommonInfoWithoutRoles'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/role'

    userCommonInfoWithBlocked:
      allOf:
        - $ref: '#/components/schemas/userCommonInfo'
        - type: object
          properties:
            isBlocked:
              description: 'The user is status, whether blocked or not.'
              type: boolean
              example: false

    userCreatableAdminModel:
      allOf:
        - $ref: '#/components/schemas/credentials'
        - $ref: '#/components/schemas/userCommonInfo'

    userCreatableModel:
      allOf:
        - $ref: '#/components/schemas/credentials'
        - $ref: '#/components/schemas/userCommonInfoWithoutRoles'

    userUpdatableModel:
      allOf:
        - $ref: '#/components/schemas/userCommonInfoWithBlocked'

    userIdModel:
      type: object
      properties:
        id:
          description: 'Unique identifier of the user.'
          type: integer
          example: 12

    userModel:
      allOf:
        - $ref: '#/components/schemas/userCommonInfoWithBlocked'

    adventurerInfo:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/adventurerStatus'
        experience:
          description: 'Experience points obtained by the adventurer'
          type: integer
          example: 10
        rank:
          $ref: '#/components/schemas/ranksModel'
        reason:
          description: 'Reason for becoming an adventurer.'
          type: string
          example: "I want to kill all the goblins."

    adventurerModel:
      allOf:
        - $ref: '#/components/schemas/userIdModel'
        - type: object
          properties:
            username:
              description: 'Username.'
              type: string
              example: 'blackIIIfox@gmail.com'
        - $ref: '#/components/schemas/userCommonInfoWithoutRoles'
        - $ref: '#/components/schemas/adventurerInfo'

    adventurerCreatableModel:
      allOf:
        - $ref: '#/components/schemas/credentials'
        - $ref: '#/components/schemas/userCommonInfoWithoutRoles'
        - type: object
          properties:
            reason:
              description: 'Reason for becoming an adventurer.'
              type: string
              example: "I want to kill all the goblins."

    adventurerStatusUpdatableModel:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/adventurerStatus'

    adventurerRanksUpdatableModel:
      type: object
      properties:
        newRank:
          $ref: '#/components/schemas/ranksModel'
        reason:
          type: string
          description: "Reason for changing rank"
          example: "Too weak."

    rankHistoryModel:
      type: object
      properties:
        oldRank:
          $ref: '#/components/schemas/ranksModel'
        newRank:
          $ref: '#/components/schemas/ranksModel'
        type:
          $ref: '#/components/schemas/rankType'
        reason:
          type: string
          description: "Reason for changing rank if type is Distributor"
          example: "Too weak."
        time:
          description: 'Date the contract was created.'
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'

    rankType:
      description: 'Rank distribution type.'
      type: string
      enum:
        - Auto
        - Distributor
      example:
        Distributor

    role:
      description: 'User role in system. Define user privileges in the system.'
      type: string
      enum:
        - Admin
        - Adventurer
        - Customer
        - Registrar
        - Distributor
      example:
        Admin

    adventurerStatus:
      description: 'The status of the adventurer.'
      type: string
      enum:
        - Active
        - Dead
        - NotConfirmed
        - Rejected
      example:
        Active

    contractStatus:
      description: 'Contract status in the system.'
      type: string
      enum:
        - Created
        - Rejected
        - Accepted
        - Performing
        - Performed
        - Completed
      example:
        Created

    ranksModel:
      description: 'The rank of adventurer.'
      type: string
      enum:
        - Platinum
        - Gold
        - Silver
        - Bronze
        - Ruby
        - Emerald
        - Sapphire
        - Steel
        - Obsidian
        - Porcelain
      example:
        Emerald

    contract:
      allOf:
        - $ref: '#/components/schemas/contractIdModel'
        - $ref: '#/components/schemas/contractModel'

    contractIdModel:
      type: object
      properties:
        id:
          description: 'Unique identifier of the user.'
          type: integer
          example: 15

    contractCreateModel:
      type: object
      properties:
        customer:
          description: 'Contract customer.'
          type: integer
          example: 12
        nameContract:
          description: 'Name of contract.'
          type: string
          example: 'Killing goblins in the mountains'
        reward:
          description: 'Reward for completed task.'
          type: integer
          example: 500
        address:
          description: 'The address at which the contract is to be performed.'
          type: boolean
          example: 'Novoizmaylovsky Prospekt, 21k4, Saint Petersburg, Russia'
        description:
          description: 'Description of the contract submitted by the contractor.'
          type: string
          example: 'You need to kill 10 goblins and 1 Hobbs in the winter cave. They are poorly prepared, do not have armor and weapons.'
        requestComment:
          description: 'Review of the Guild Registrar on the submitted contract.'
          type: string
          example: 'The abilities of goblins and Hobbs are not described.'

    contractUpdateModel:
      allOf:
        - type: object
          properties:
            executor:
              description: 'Contract executor.'
              type: integer
              example: 25
            reward:
              description: 'Reward for completed task.'
              type: integer
              example: 500
            minRank:
              $ref: '#/components/schemas/ranksModel'
            address:
              description: 'The address at which the contract is to be performed.'
              type: string
              example: 'Novoizmaylovsky Prospekt, 21k4, Saint Petersburg, Russia'
            contractStatus:
              $ref: '#/components/schemas/contractStatus'
            description:
              description: 'Description of the contract submitted by the contractor.'
              type: string
              example: 'You need to kill 10 goblins and 1 Hobbs in the winter cave. They are poorly prepared, do not have armor and weapons.'
            requestComment:
              description: 'Review of the Guild Registrar on the submitted contract.'
              type: string
              example: 'The abilities of goblins and Hobbs are not described.'
            registrarComment:
              description: 'Review of the Registrar.'
              type: string
              example: 'The abilities of goblins and Hobbs are not described.'

    contractModel:
      allOf:
        - type: object
          properties:
            customer:
              description: 'Contract customer.'
              type: integer
              example: 12
            executor:
              description: 'Contract executor.'
              type: integer
              example: 25
            nameContract:
              description: 'Name of contract.'
              type: string
              example: 'Killing goblins in the mountains'
            reward:
              description: 'Reward for completed task.'
              type: integer
              example: 500
            minRank:
              $ref: '#/components/schemas/ranksModel'
            address:
              description: 'The address at which the contract is to be performed.'
              type: string
              example: 'Novoizmaylovsky Prospekt, 21k4, Saint Petersburg, Russia'
            createTime:
              description: 'Date the contract was created.'
              type: string
              format: date-time
              example: '2017-07-21T17:32:28Z'
            contractStatus:
              $ref: '#/components/schemas/contractStatus'
            description:
              description: 'Description of the contract submitted by the contractor.'
              type: string
              example: 'You need to kill 10 goblins and 1 Hobbs in the winter cave. They are poorly prepared, do not have armor and weapons.'
            requestComment:
              description: 'Review of the Guild Registrar on the submitted contract.'
              type: string
              example: 'The abilities of goblins and Hobbs are not described.'
            registrarComment:
              description: 'Review of the Registrar.'
              type: string
              example: 'The abilities of goblins and Hobbs are not described.'
            performedComment:
              description: 'Revocation of the adventurer is contract performance.'
              type: string
              example: 'All dead.'
            cancellationComment:
              description: 'Cancellation comment.'
              type: string
              example: 'The contract was too difficult.'

    notification:
      allOf:
        - type: object
          properties:
            contractNotifications:
              type: array
              items:
                $ref: '#/components/schemas/contractNotification'

    contractNotification:
      type: object
      properties:
        id:
          description: 'Unique identifier of the contractNotification.'
          type: integer
          example: 15
        contractId:
          description: 'The contract id that has been updated.'
          type: integer
          example: 12
        contractName:
          description: 'The contract name that has been updated.'
          type: string
          example: "Kill all goblins"
        contractOldStatus:
          $ref: '#/components/schemas/contractStatus'
        contractNewStatus:
          $ref: '#/components/schemas/contractStatus'
        executor:
          description: 'Contract executor.'
          type: integer
          example: 25
        customer:
          description: 'Contract customer.'
          type: integer
          example: 122
        createTime:
          description: 'Date the contract was created.'
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'

    contractPerformedModel:
      type: object
      properties:
        performedComment:
          description: 'Unique identifier of the contractNotification.'
          type: string
          example: "All the goblins are killed."

    contractCancellationModel:
      type: object
      properties:
        cancellationComment:
          description: 'Unique identifier of the contractNotification.'
          type: string
          example: "The contract was too difficult."

    accountUpdateInfo:
      allOf:
        - $ref: '#/components/schemas/userCommonInfoWithoutRoles'

    passwordUpdateInfo:
      type: object
      properties:
        oldPassword:
          description: 'Old password for validation.'
          type: string
          example: "passwordOld123"
        newPassword:
          description: 'New password.'
          type: string
          example: "passwordNew456"

    errorModel:
      type: object
      properties:
        message:
          type: string
          description: 'Error description.'

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes